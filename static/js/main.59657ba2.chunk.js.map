{"version":3,"sources":["Cell.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","flipCellsAroundMe","isLit","classes","className","onClick","role","Board","nrows","ncols","chanceLightStartsOn","useState","initialBoard","y","row","x","push","Math","random","createBoard","board","setBoard","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","every","cell","tblBoard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAqBeA,MALf,YAAmD,IAAnCC,EAAkC,EAAlCA,kBAAkC,IAAfC,MAC3BC,EAAO,oBADmC,SAChB,WAAa,IAC7C,OAAO,oBAAIC,UAAWD,EAASE,QAASJ,EAAmBK,KAAK,Y,MC6FnDC,MAlFf,YAAsE,IAAD,IAApDC,aAAoD,MAA5C,EAA4C,MAAzCC,aAAyC,MAAjC,EAAiC,MAA9BC,2BAA8B,MAAR,IAAQ,IACzCC,mBAG1B,WAEE,IADA,IAAIC,EAAe,GACVC,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAE9B,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIN,EAAOM,IACzBD,EAAIE,KAAKC,KAAKC,SAAWR,GAE3BE,EAAaI,KAAKF,GAEpB,OAAOF,EAZ0BO,IADgC,mBAC5DC,EAD4D,KACrDC,EADqD,KAsBnE,SAASC,EAAgBC,GACvBF,GAAS,SAAAG,GAAa,IAAD,EACJD,EAAME,MAAM,KAAKC,IAAIC,QADjB,mBACZd,EADY,KACTE,EADS,KAGba,EAAW,SAACf,EAAGE,EAAGc,GAGlBd,GAAK,GAAKA,EAAIN,GAASI,GAAK,GAAKA,EAAIL,IACvCqB,EAAUhB,GAAGE,IAAMc,EAAUhB,GAAGE,KAI9Bc,EAAYL,EAASE,KAAI,SAAAZ,GAAG,mBAAQA,MAQ1C,OANAc,EAASf,EAAGE,EAAGc,GACfD,EAASf,EAAGE,EAAI,EAAGc,GACnBD,EAASf,EAAGE,EAAI,EAAGc,GACnBD,EAASf,EAAI,EAAGE,EAAGc,GACnBD,EAASf,EAAI,EAAGE,EAAGc,GAEZA,KAKX,GA7BST,EAAMU,OAAM,SAAAhB,GAAG,OAAIA,EAAIgB,OAAM,SAAAC,GAAI,OAAKA,QA8B7C,OAAO,2CAOT,IAFA,IAAIC,EAAW,GAENnB,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAE9B,IADA,IAAIC,EAAM,GADoB,WAErBC,GACP,IAAIQ,EAAK,UAAMV,EAAN,YAAWE,GACpBD,EAAIE,KACF,cAAC,EAAD,CAEEd,MAAOkB,EAAMP,GAAGE,GAChBd,kBAAmB,kBAAMqB,EAAgBC,KAFpCA,KAJFR,EAAI,EAAGA,EAAIN,EAAOM,IAAM,EAAxBA,GAUTiB,EAAShB,KAAK,6BAAaF,GAAJD,IAGzB,OACE,qCACE,gDACA,4BAAG,+cACH,uBAAOT,UAAU,QAAjB,SACE,gCAAQ4B,U,MC1FDC,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,OCGS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.59657ba2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nfunction Cell({ flipCellsAroundMe, isLit=false }) {\n  const classes = `Cell ${isLit ? \"Cell-lit\" : \"\"}`;\n  return <td className={classes} onClick={flipCellsAroundMe} role=\"button\" />;\n}\n\nexport default Cell;\n","import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  /* Check if the player has won */\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  /* Flip cells around a given cell */\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <div>You Win!</div>;\n  }\n\n  // make table board: rows of Cell components\n\n  let tblBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  return (\n    <>\n      <h1>Lights Out App</h1>\n      <p><small>Lights Out is a logic/puzzle game, played on a gird of individual lights, which can either be lit or unlit. The puzzle is won when when all of the lights are turned off. You can click on a cell to toggle that light — but it also toggles the light above it, to the left of it, to the right of it, and below it. (Cells on an edge or in the corner won’t flip as many lights, since they are missing some neighbors).</small></p>\n      <table className=\"Board\">\n        <tbody>{tblBoard}</tbody>\n      </table>\n    </>\n  );\n\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}